/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[2,5,35],$V3=[1,26],$V4=[1,29],$V5=[1,28],$V6=[1,32],$V7=[1,30],$V8=[1,31],$V9=[1,33],$Va=[1,34],$Vb=[1,39],$Vc=[1,40],$Vd=[2,12,35,37,59,81,82,83,84],$Ve=[1,47],$Vf=[1,48],$Vg=[2,12,35],$Vh=[17,42],$Vi=[1,65],$Vj=[1,63],$Vk=[1,60],$Vl=[1,62],$Vm=[1,66],$Vn=[1,67],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,79],$Vt=[1,80],$Vu=[1,81],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[17,42,48,67,68,69,70,72,73,74,75,76,77,78,79],$VF=[1,94],$VG=[1,95],$VH=[17,42,48,67,68,72,73,74,75,76,77,78,79],$VI=[17,42,48,72,73,78,79],$VJ=[17,42,48,72,73,74,75,76,77,78,79],$VK=[1,127],$VL=[1,129],$VM=[42,48],$VN=[1,153],$VO=[1,150],$VP=[1,151],$VQ=[1,154],$VR=[1,155],$VS=[1,156],$VT=[1,157],$VU=[1,158],$VV=[1,159],$VW=[1,160],$VX=[2,12,31,32,35,37,46,49,50,51,52,55,59,66,81,82,83,84],$VY=[2,12,31,32,37,46,50,51,52,55,59,66,81,82,83,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"headers":4,"EOF":5,"head":6,"clase":7,"interface":8,"bloque_instruccion":9,"KEY_LEFT":10,"instrucciones":11,"KEY_RIGHT":12,"bloque_instruccion2":13,"instrucciones2":14,"instruccion":15,"declaracion":16,"PUNTO_COMA":17,"asignacion":18,"main":19,"metodo":20,"instruccion2":21,"metodo2":22,"sentencia":23,"call_metodo":24,"if":25,"while":26,"do":27,"for":28,"print":29,"return":30,"CONTINUE":31,"BREAK":32,"incremento":33,"sentencias":34,"PUBLIC":35,"CLASS":36,"IDENTIFICADOR":37,"INTERFACE":38,"bloque_sentencia":39,"tipo":40,"declaraciones":41,"COMA":42,"decla":43,"ASIGNAR":44,"expresion":45,"IF":46,"PAR_LEFT":47,"PAR_RIGHT":48,"ELSE":49,"WHILE":50,"DO":51,"FOR":52,"INCREMENTO":53,"DECREMENTO":54,"PRINT":55,"STATIC":56,"VOID":57,"MAIN":58,"STRING":59,"COR_LEFT":60,"COR_RIGHT":61,"ARGS":62,"parametros":63,"valores":64,"parametro":65,"RETURN":66,"MAS":67,"MENOS":68,"POR":69,"DIV":70,"primitivo":71,"IGUAL":72,"DIFERENTE":73,"MAYOR":74,"MENOR":75,"MAYOR_IGUAL":76,"MENOR_IGUAL":77,"AND":78,"OR":79,"NOT":80,"INT":81,"DOUBLE":82,"CHAR":83,"BOOLEAN":84,"ENTERO":85,"DECIMAL":86,"CADENA":87,"CARACTER":88,"TRUE":89,"FALSE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"KEY_LEFT",12:"KEY_RIGHT",17:"PUNTO_COMA",31:"CONTINUE",32:"BREAK",35:"PUBLIC",36:"CLASS",37:"IDENTIFICADOR",38:"INTERFACE",42:"COMA",44:"ASIGNAR",46:"IF",47:"PAR_LEFT",48:"PAR_RIGHT",49:"ELSE",50:"WHILE",51:"DO",52:"FOR",53:"INCREMENTO",54:"DECREMENTO",55:"PRINT",56:"STATIC",57:"VOID",58:"MAIN",59:"STRING",60:"COR_LEFT",61:"COR_RIGHT",62:"ARGS",66:"RETURN",67:"MAS",68:"MENOS",69:"POR",70:"DIV",72:"IGUAL",73:"DIFERENTE",74:"MAYOR",75:"MENOR",76:"MAYOR_IGUAL",77:"MENOR_IGUAL",78:"AND",79:"OR",80:"NOT",81:"INT",82:"DOUBLE",83:"CHAR",84:"BOOLEAN",85:"ENTERO",86:"DECIMAL",87:"CADENA",88:"CARACTER",89:"TRUE",90:"FALSE"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[9,3],[9,2],[13,3],[13,2],[11,2],[11,1],[15,2],[15,2],[15,1],[15,1],[15,1],[14,2],[14,1],[21,2],[21,1],[23,2],[23,2],[23,2],[23,1],[23,1],[23,2],[23,1],[23,2],[23,2],[23,2],[23,2],[23,2],[23,1],[34,2],[34,1],[7,4],[8,4],[39,3],[39,2],[16,2],[41,3],[41,1],[43,3],[43,1],[18,3],[25,5],[25,7],[25,7],[26,5],[27,6],[28,9],[33,2],[33,2],[29,4],[19,11],[20,7],[20,7],[20,6],[20,6],[22,6],[22,6],[22,5],[22,5],[24,4],[24,3],[64,3],[64,1],[63,3],[63,1],[65,2],[30,2],[30,1],[45,3],[45,3],[45,3],[45,3],[45,2],[45,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,1],[40,1],[40,1],[40,1],[40,1],[40,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var aux = tokens; var aux2 = errores; tokens = []; errores = []; return [$$[$0-1],aux,aux2]; 
break;
case 2:
 var aux = tokens; var aux2 = errores; tokens = []; errores = []; return [[],aux,aux2]; 
break;
case 3: case 12: case 19: case 36:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4: case 13: case 20: case 37:
 this.$ = [$$[$0]]; 
break;
case 5:
 this.$ = {'CLASE':$$[$0]}; 
break;
case 6:
 this.$ = {'INTERFACE':$$[$0]}; 
break;
case 7: case 18: case 22: case 35:
 errores.push(addError('Sintactico', yytext ,this._$.first_line ,this._$.first_column)); 
break;
case 8: case 10:
 this.$ = {'izquierda':$$[$0-2], 'INSTRUCCIONES': $$[$0-1], 'derecha':$$[$0]}; 
break;
case 9: case 11: case 41:
 this.$ = {'izquierda': $$[$0-1], 'derecha': $$[$0]}; 
break;
case 14:
 this.$ = { 'DECLARACION':$$[$0-1] }; 
break;
case 15:
 this.$ = { 'ASIGNACION':$$[$0-1] }; 
break;
case 16:
 this.$ = { 'MAIN':$$[$0] }; 
break;
case 17:
 this.$ = { 'METODO':$$[$0] }; 
break;
case 21:
 this.$ = { 'FUNCION':$$[$0-1] }; 
break;
case 23:
 this.$ = {'DECLARACION':$$[$0-1]} 
break;
case 24:
 this.$ = {'ASIGNACION':$$[$0-1]} 
break;
case 25:
 this.$ = {'METODO':$$[$0-1]} 
break;
case 26:
 this.$ = {'IF':$$[$0]} 
break;
case 27:
 this.$ = {'WHILE':$$[$0]} 
break;
case 28:
 this.$ = {'DO':$$[$0-1]} 
break;
case 29:
 this.$ = {'FOR':$$[$0]} 
break;
case 30:
 this.$ = {'PRINT':$$[$0-1]} 
break;
case 31:
 this.$ = {'RETURN':$$[$0-1]} 
break;
case 32:
 this.$ = {'CONTINUE':$$[$0-1]} 
break;
case 33:
 this.$ = {'BREAK':$$[$0-1]} 
break;
case 34:
 this.$ = {'INCREMENTO':$$[$0-1]} 
break;
case 38:
 this.$ = {'visibilidad':$$[$0-3], 'clase':$$[$0-2], 'identificador':$$[$0-1], 'BLOQUE INSTRUCCION':$$[$0]}; 
break;
case 39:
 this.$ = {'visibilidad':$$[$0-3], 'interface':$$[$0-2], 'identificador':$$[$0-1], 'BLOQUE INSTRUCCION':$$[$0]}; 
break;
case 40:
 this.$ = {'izquierda': $$[$0-2], 'SENTENCIAS': $$[$0-1], 'derecha': $$[$0]}; 
break;
case 42:
 this.$ = {'tipo': $$[$0-1], 'DECLARACIONES': $$[$0]}; 
break;
case 43:
 $$[$0-2].push({'coma':$$[$0-1], 'ASIGNACION':$$[$0]}); this.$ = $$[$0-2]; 
break;
case 44:
 this.$ = [{'ASIGNACION':$$[$0]}]; 
break;
case 45: case 47:
 this.$ = {'identificador':$$[$0-2], 'operador':$$[$0-1], 'EXPRESION':$$[$0]}; 
break;
case 46:
 this.$ = {'identificador':$$[$0]}; 
break;
case 48:
 this.$ = {'if':$$[$0-4], 'izquierda':$$[$0-3], 'expresion':$$[$0-2], 'derecha': $$[$0-1], 'BLOQUE SENTENCIA':$$[$0]}; 
break;
case 49:
 this.$ = {'if':$$[$0-6], 'izquierda':$$[$0-5], 'expresion':$$[$0-4], 'derecha': $$[$0-3], 'BLOQUE SENTENCIA':$$[$0-2], 'else':$$[$0-1], 'IF':$$[$0]}; 
break;
case 50:
 this.$ = {'if':$$[$0-6], 'izquierda':$$[$0-5], 'expresion':$$[$0-4], 'derecha': $$[$0-3], 'BLOQUE SENTENCIA':$$[$0-2], 'else':$$[$0-1], 'IF': $$[$0]}; 
break;
case 51:
 this.$ = {'while':$$[$0-4], 'izquierda':$$[$0-3], 'EXPRESION':$$[$0-2], 'derecha':$$[$0-1], 'BLOQUE SENTENCIA':$$[$0]}; 
break;
case 52:
 this.$ = {'do':$$[$0-5], 'BLOQUE SENTENCIA':$$[$0-4] ,'while':$$[$0-3], 'izquierda':$$[$0-2], 'EXPRESION':$$[$0-1], 'derecha':$$[$0]}; 
break;
case 53:
 this.$ = {'for': $$[$0-8], 'izquierda': $$[$0-7], 'DECLARACION': $$[$0-6], 'EXPRESION 1': $$[$0-4], 'EXPRESION 2': $$[$0-2], 'derecha': $$[$0-1],'BLOQUE SENTENCIA': $$[$0]}; 
break;
case 54: case 55:
 this.$ = {'identificador': $$[$0-1], 'operador': $$[$0]}; 
break;
case 56:
 this.$ = {'print': 'print', 'izquierda': $$[$0-2], 'EXPRESION': $$[$0-1],'derecha': $$[$0]}; 
break;
case 57:
 this.$ = {'public':$$[$0-10],'static':$$[$0-9],'void':$$[$0-8],'main': $$[$0-7], 'izquierda': $$[$0-6], 'args': $$[$0-2], 'derecha' : $$[$0-1], 'BLOQUE SENTENCIA': $$[$0]}; 
break;
case 58: case 59:
 this.$ = {'visibilidad': $$[$0-6], 'tipo': $$[$0-5], 'identificador': $$[$0-4],'izquierda': $$[$0-3], 'PARAMETROS': $$[$0-2], 'derecha': $$[$0-1], 'BLOQUE SENTENCIA': $$[$0]}; 
break;
case 60: case 61:
 this.$ = {'visibilidad': $$[$0-5], 'tipo': $$[$0-4], 'identificador': $$[$0-3],'izquierda': $$[$0-2], 'derecha': $$[$0-1], 'BLOQUE SENTENCIA': $$[$0]}; 
break;
case 62:
 this.$ = {'visibilidad': $$[$0-5], 'tipo': $$[$0-4], 'identificador': $$[$0-2],'izquierda': $$[$0-2], 'PARAMETROS': $$[$0-1], 'derecha': $$[$0]}; 
break;
case 63:
 this.$ = {'visibilidad': $$[$0-5], 'tipo': $$[$0-4], 'identificador': $$[$0-2],'izquierda': $$[$0-2], 'PARAMETROS': $$[$0-1], 'derecha': $$[$0]} ;
break;
case 64: case 65:
 this.$ = {'visibilidad': $$[$0-4], 'tipo': $$[$0-3], 'identificador': $$[$0-2], 'izquierda': $$[$0-1], 'derecha': $$[$0]}; 
break;
case 66:
 this.$ = {'identificador': $$[$0-3], 'izquierdo': $$[$0-2], 'PARAMETROS': $$[$0-1], 'derecha': $$[$0]}; 
break;
case 67:
 this.$ = {'identificador': $$[$0-2], 'izquierdo': $$[$0-1], 'derecha': $$[$0]}; 
break;
case 68:
 $$[$0-2].push({'coma':$$[$0-1], 'EXPRESION':$$[$0]}); this.$ = $$[$0-2]; 
break;
case 69:
 this.$ = [{'EXPRESION':$$[$0]}]; 
break;
case 70:
 $$[$0-2].push({'coma':$$[$0-1], 'PARAMETRO':$$[$0]}); this.$ = $$[$0-2]; 
break;
case 71:
 this.$ = [{'PARAMETRO':$$[$0]}]; 
break;
case 72:
 this.$ = {'tipo': $$[$0-1], 'identificador': $$[$0]}; 
break;
case 73:
 this.$ = {'return': $$[$0-1], 'EXPRESION': $$[$0]}; 
break;
case 74:
 this.$ = {'return': $$[$0]}; 
break;
case 75: case 76: case 77: case 78: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88:
 this.$ = {'EXPRESION 1': $$[$0-2], 'operador': $$[$0-1], 'EXPRESION 2': $$[$0]}; 
break;
case 79:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 80: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103:
 this.$ = $$[$0]; 
break;
case 89:
 this.$ = {'negacion': $$[$0-1], 'EXPRESION': $$[$0]}; 
break;
case 90:
 this.$ = {'izquierda': $$[$0-2], 'EXPRESION': $$[$0-1], 'derecha': $$[$0]}; 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,35:$V1},{1:[3]},{2:$V0,5:[1,9],6:10,7:5,8:6,35:$V1},{1:[2,2]},o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),o($V2,[2,7]),{36:[1,11],38:[1,12]},{1:[2,1]},o($V2,[2,3]),{37:[1,13]},{37:[1,14]},{9:15,10:[1,16]},{10:[1,18],13:17},o($V2,[2,38]),{2:$V3,11:19,12:[1,20],15:21,16:22,18:23,19:24,20:25,35:$V4,37:$V5,40:27,59:$V6,81:$V7,82:$V8,83:$V9,84:$Va},o($V2,[2,39]),{2:$Vb,12:[1,36],14:35,21:37,22:38,35:$Vc},{2:$V3,12:[1,41],15:42,16:22,18:23,19:24,20:25,35:$V4,37:$V5,40:27,59:$V6,81:$V7,82:$V8,83:$V9,84:$Va},o($V2,[2,9]),o($Vd,[2,13]),{17:[1,43]},{17:[1,44]},o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),{37:$Ve,41:45,43:46},{44:$Vf},{40:51,56:[1,49],57:[1,50],59:$V6,81:$V7,82:$V8,83:$V9,84:$Va},{37:[2,92]},{37:[2,93]},{37:[2,94]},{37:[2,95]},{37:[2,96]},{2:$Vb,12:[1,52],21:53,22:38,35:$Vc},o($V2,[2,11]),o($Vg,[2,20]),{17:[1,54]},o($Vg,[2,22]),{40:56,57:[1,55],59:$V6,81:$V7,82:$V8,83:$V9,84:$Va},o($V2,[2,8]),o($Vd,[2,12]),o($Vd,[2,14]),o($Vd,[2,15]),{17:[2,42],42:[1,57]},o($Vh,[2,44]),o($Vh,[2,46],{44:[1,58]}),{33:64,37:$Vi,45:59,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{57:[1,72]},{37:[1,73]},{37:[1,74]},o($V2,[2,10]),o($Vg,[2,19]),o($Vg,[2,21]),{37:[1,75]},{37:[1,76]},{37:$Ve,43:77},{33:64,37:$Vi,45:78,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{17:[2,47],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{33:64,37:$Vi,45:91,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},o($VE,[2,80]),{33:64,37:$Vi,45:92,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:93,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},o($VE,[2,91]),o($VE,[2,97],{53:$VF,54:$VG}),o($VE,[2,98]),o($VE,[2,99]),o($VE,[2,100]),o($VE,[2,101]),o($VE,[2,102]),o($VE,[2,103]),{58:[1,96]},{47:[1,97]},{47:[1,98]},{47:[1,99]},{47:[1,100]},o($Vh,[2,43]),o($Vh,[2,45],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),{33:64,37:$Vi,45:101,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:102,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:103,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:104,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:105,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:106,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:107,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:108,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:109,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:110,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:111,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:112,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},o($VE,[2,79]),o($VE,[2,89]),{48:[1,113],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($VE,[2,54]),o($VE,[2,55]),{47:[1,114]},{40:118,48:[1,116],59:$V6,63:115,65:117,81:$V7,82:$V8,83:$V9,84:$Va},{40:118,48:[1,120],59:$V6,63:119,65:117,81:$V7,82:$V8,83:$V9,84:$Va},{40:118,48:[1,122],59:$V6,63:121,65:117,81:$V7,82:$V8,83:$V9,84:$Va},{40:118,48:[1,124],59:$V6,63:123,65:117,81:$V7,82:$V8,83:$V9,84:$Va},o($VH,[2,75],{69:$Vu,70:$Vv}),o($VH,[2,76],{69:$Vu,70:$Vv}),o($VE,[2,77]),o($VE,[2,78]),o($VI,[2,81],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB}),o($VI,[2,82],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,74:$Vy,75:$Vz,76:$VA,77:$VB}),o($VJ,[2,83],{67:$Vs,68:$Vt,69:$Vu,70:$Vv}),o($VJ,[2,84],{67:$Vs,68:$Vt,69:$Vu,70:$Vv}),o($VJ,[2,85],{67:$Vs,68:$Vt,69:$Vu,70:$Vv}),o($VJ,[2,86],{67:$Vs,68:$Vt,69:$Vu,70:$Vv}),o([17,42,48,78,79],[2,87],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB}),o([17,42,48,79],[2,88],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC}),o($VE,[2,90]),{59:[1,125]},{42:$VK,48:[1,126]},{10:$VL,39:128},o($VM,[2,71]),{37:[1,130]},{42:$VK,48:[1,131]},{10:$VL,39:132},{42:$VK,48:[1,133]},{17:[2,64]},{42:$VK,48:[1,134]},{17:[2,65]},{60:[1,135]},{10:$VL,39:136},{40:118,59:$V6,65:137,81:$V7,82:$V8,83:$V9,84:$Va},o($Vd,[2,60]),{2:$VN,12:[1,139],16:141,18:142,23:140,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:$VO,32:$VP,33:152,34:138,37:$VQ,40:27,46:$VR,50:$VS,51:$VT,52:$VU,55:$VV,59:$V6,66:$VW,81:$V7,82:$V8,83:$V9,84:$Va},o($VM,[2,72]),{10:$VL,39:161},o($Vd,[2,61]),{17:[2,62]},{17:[2,63]},{61:[1,162]},o($Vd,[2,58]),o($VM,[2,70]),{2:$VN,12:[1,163],16:141,18:142,23:164,24:143,25:144,26:145,27:146,28:147,29:148,30:149,31:$VO,32:$VP,33:152,37:$VQ,40:27,46:$VR,50:$VS,51:$VT,52:$VU,55:$VV,59:$V6,66:$VW,81:$V7,82:$V8,83:$V9,84:$Va},o($VX,[2,41]),o($VY,[2,37]),{17:[1,165]},{17:[1,166]},{17:[1,167]},o($VY,[2,26]),o($VY,[2,27]),{17:[1,168]},o($VY,[2,29]),{17:[1,169]},{17:[1,170]},{17:[1,171]},{17:[1,172]},{17:[1,173]},o($VY,[2,35]),{44:$Vf,47:[1,174],53:$VF,54:$VG},{47:[1,175]},{47:[1,176]},{10:$VL,39:177},{47:[1,178]},{47:[1,179]},{17:[2,74],33:64,37:$Vi,45:180,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},o($Vd,[2,59]),{62:[1,181]},o($VX,[2,40]),o($VY,[2,36]),o($VY,[2,23]),o($VY,[2,24]),o($VY,[2,25]),o($VY,[2,28]),o($VY,[2,30]),o($VY,[2,31]),o($VY,[2,32]),o($VY,[2,33]),o($VY,[2,34]),{33:64,37:$Vi,45:184,47:$Vj,48:[1,183],64:182,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:185,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:186,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{50:[1,187]},{16:188,40:27,59:$V6,81:$V7,82:$V8,83:$V9,84:$Va},{33:64,37:$Vi,45:189,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{17:[2,73],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{48:[1,190]},{42:[1,192],48:[1,191]},{17:[2,67]},o($VM,[2,69],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),{48:[1,193],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{48:[1,194],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{47:[1,195]},{17:[1,196]},{48:[1,197],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{10:$VL,39:198},{17:[2,66]},{33:64,37:$Vi,45:199,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{10:$VL,39:200},{10:$VL,39:201},{33:64,37:$Vi,45:202,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{33:64,37:$Vi,45:203,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},{17:[2,56]},o($Vd,[2,57]),o($VM,[2,68],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD}),o($VY,[2,48],{49:[1,204]}),o($VY,[2,51]),{48:[1,205],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{17:[1,206],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{10:$VL,25:208,39:207,46:$VR},{17:[2,52]},{33:64,37:$Vi,45:209,47:$Vj,68:$Vk,71:61,80:$Vl,85:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr},o($VY,[2,49]),o($VY,[2,50]),{48:[1,210],67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{10:$VL,39:211},o($VY,[2,53])],
defaultActions: {3:[2,2],9:[2,1],30:[2,92],31:[2,93],32:[2,94],33:[2,95],34:[2,96],122:[2,64],124:[2,65],133:[2,62],134:[2,63],183:[2,67],191:[2,66],197:[2,56],205:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var tokens = [];
    var errores = [];

    function addToken(token,lexema,fila,columna){
        return {'token':token, 'lexema':lexema, 'fila':fila, 'columna':columna}
    }

    function addError(tipo,lexema,fila,columna){
        return {'tipo':tipo, 'lexema':lexema, 'fila':fila, 'columna':columna}
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: tokens.push(addToken('COMENTARIO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
case 1: tokens.push(addToken('COMENTARIO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
case 2:;
break;
case 3: tokens.push(addToken('KEY_LEFT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 10; 
break;
case 4: tokens.push(addToken('KEY_RIGHT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12; 
break;
case 5: tokens.push(addToken('PAR_LEFT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47; 
break;
case 6: tokens.push(addToken('PAR_RIGHT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48; 
break;
case 7: tokens.push(addToken('COR_LEFT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60; 
break;
case 8: tokens.push(addToken('COR_RIGHT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61; 
break;
case 9: tokens.push(addToken('INCREMENTO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53; 
break;
case 10: tokens.push(addToken('MAS', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67; 
break;
case 11: tokens.push(addToken('DECREMENTO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54; 
break;
case 12: tokens.push(addToken('MENOS', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68; 
break;
case 13: tokens.push(addToken('POR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69; 
break;
case 14: tokens.push(addToken('DIV', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70; 
break;
case 15: tokens.push(addToken('AND', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78; 
break;
case 16: tokens.push(addToken('OR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79; 
break;
case 17: tokens.push(addToken('DIFERENTE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73; 
break;
case 18: tokens.push(addToken('NOT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80; 
break;
case 19: tokens.push(addToken('XOR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'XOR'; 
break;
case 20: tokens.push(addToken('MAYOR_IGUAL', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76; 
break;
case 21: tokens.push(addToken('MAYOR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74; 
break;
case 22: tokens.push(addToken('MENOR_IGUAL', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77; 
break;
case 23: tokens.push(addToken('MENOR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75; 
break;
case 24: tokens.push(addToken('IGUAL', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72; 
break;
case 25: tokens.push(addToken('ASIGNAR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44; 
break;
case 26: tokens.push(addToken('PUNTO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'PUNTO'; 
break;
case 27: tokens.push(addToken('DOS_PUNTOS', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'DOS_PUNTOS'; 
break;
case 28: tokens.push(addToken('COMA', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42; 
break;
case 29: tokens.push(addToken('PUNTO_COMA', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17; 
break;
case 30: tokens.push(addToken('PUBLIC', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35; 
break;
case 31: tokens.push(addToken('CLASS', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36; 
break;
case 32: tokens.push(addToken('INTERFACE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38; 
break;
case 33: tokens.push(addToken('STATIC', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56; 
break;
case 34: tokens.push(addToken('FOR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52; 
break;
case 35: tokens.push(addToken('WHILE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50; 
break;
case 36: tokens.push(addToken('DO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51; 
break;
case 37: tokens.push(addToken('IF', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46; 
break;
case 38: tokens.push(addToken('ELSE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49; 
break;
case 39: tokens.push(addToken('TRUE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 89; 
break;
case 40: tokens.push(addToken('FALSE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90; 
break;
case 41: tokens.push(addToken('CONTINUE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31; 
break;
case 42: tokens.push(addToken('BREAK', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32; 
break;
case 43: tokens.push(addToken('RETURN', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66; 
break;
case 44: tokens.push(addToken('VOID', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57; 
break;
case 45: tokens.push(addToken('INT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81; 
break;
case 46: tokens.push(addToken('DOUBLE', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82; 
break;
case 47: tokens.push(addToken('STRING', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59; 
break;
case 48: tokens.push(addToken('CHAR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83; 
break;
case 49: tokens.push(addToken('BOOLEAN', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84; 
break;
case 50: tokens.push(addToken('MAIN', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58; 
break;
case 51: tokens.push(addToken('ARGS', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62; 
break;
case 52: tokens.push(addToken('PRINT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55; 
break;
case 53: tokens.push(addToken('PRINT', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55; 
break;
case 54: tokens.push(addToken('IDENTIFICADOR', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37; 
break;
case 55: tokens.push(addToken('CADENA', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87; 
break;
case 56: tokens.push(addToken('CARACTER', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88; 
break;
case 57: tokens.push(addToken('DECIMAL', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86; 
break;
case 58: tokens.push(addToken('ENTERO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85; 
break;
case 59: tokens.push(addToken('EOF', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 5; 
break;
case 60: errores.push(addError('Lexico', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:static\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:String\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\.out\.println\b)/i,/^(?:System\.out\.print\b)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}